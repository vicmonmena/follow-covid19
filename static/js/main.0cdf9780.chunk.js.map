{"version":3,"sources":["components/stat.jsx","components/countries.jsx","App.js","serviceWorker.js","index.js"],"names":["Stat","title","value","className","from","number","to","config","delay","toFixed","toUpperCase","Countries","selectedCountry","handleSelectCountry","useState","countries","setCountries","loading","setLoading","setError","useEffect","a","console","log","fetch","then","res","json","catch","err","data","fetchData","id","onChange","event","target","Object","keys","map","country","key","App","url","setUrl","stats","setStats","confirmed","setConfirmed","recovered","setRecovered","deaths","setDeaths","Date","lastUpdate","setLastUpdate","error","setSelectedCountry","loadData","countrySelected","dateString","d","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","hr","hour","mn","minute","sc","second","formatDate","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0cdf9780.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Spring} from 'react-spring/renderprops'\n\nconst Stat = ({title = \"no title\", value = 0}) => {\n\n  function formatValue(value) {\n    return new Intl.NumberFormat(\"es-ES\").format(value)\n  }\n\n  return (\n    <div className=\"stat\">\n        <Spring \n          from={{ number: 0 }}\n          to={{ number: value }}\n          config={{delay: 300}}>\n            {({number}) => <h2 >{number.toFixed(0)}</h2>}\n        </Spring>\n       <h5 >{title.toUpperCase()}</h5>\n    </div>\n  );\n};\n\nStat.propTypes = {\n  title: PropTypes.string,\n  value: PropTypes.number\n};\n\nexport default Stat;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Countries = ({selectedCountry = \"MUNDIAL\", handleSelectCountry}) => {\n\n  // const [url, setUrl] = useState('https://covid19.mathdro.id/api/countries');\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      console.log('Fetching Data');\n      const data = await fetch('https://covid19.mathdro.id/api/countries')\n        .then(res => res.json())\n        .catch(err => {\n          setError(err)\n          console.log(err)\n        });\n      console.log(countries)\n      setCountries({'MUNDIAL': \"md\", ...data.countries });\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  function handleChangeCountry(event) {\n    console.log('countrySelected: ', event.target.value)\n    if(event.target.value===selectedCountry) return false;\n    else {\n      handleSelectCountry(event.target.value)\n    }\n  }\n\n  return (\n    <div className=\"topright\">\n      { loading === true && \n        <p>Cargando países ...</p>\n      }\n      { loading ===false && \n        <select \n          id=\"country\"\n          onChange={handleChangeCountry}\n          value={selectedCountry}>\n          {\n            Object.keys(countries).map(country => <option key={country} value={country}>{country}</option>)\n          }\n        </select>\n      }\n    </div>\n  );\n};\n\nCountries.propTypes = {\n  selectedCountry: PropTypes.string,\n  handleSelectCountry: PropTypes.func.isRequired\n};\n\nexport default Countries;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './flat-remix.css';\nimport Stat from './components/stat';\nimport Countries from './components/countries';\n\nfunction App() {\n\n  const [url, setUrl] = useState('https://covid19.mathdro.id/api')\n  const [stats, setStats] = useState({});\n  const [loading, setLoading] = useState(false)\n  const [confirmed, setConfirmed] = useState(0)\n  const [recovered, setRecovered] = useState(0)\n  const [deaths, setDeaths] = useState(0)\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [error, setError] = useState(\"\")\n  const [selectedCountry, setSelectedCountry] = useState(\"MUNDIAL\")\n  \n  useEffect(() => {\n    loadData(url)\n  }, [url]);\n\n  useEffect(() => {\n    setConfirmed(stats.confirmed ?? 0)\n    setRecovered(stats.recovered ?? 0)\n    setDeaths(stats.deaths ?? 0)\n    setLastUpdate(stats.lastUpdate ?? 'no info')\n  }, [stats])\n\n  useEffect(() => {\n    if (selectedCountry === \"MUNDIAL\") setUrl('https://covid19.mathdro.id/api')\n    else setUrl(`https://covid19.mathdro.id/api/countries/${selectedCountry}`)\n  }, [selectedCountry])\n\n  function loadData(url) {\n    async function fetchData() {\n      setLoading(true);\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err => {\n          setError(err)\n        });\n      setStats(data);\n      setLoading(false);\n    }\n    fetchData();\n  }\n\n  function formatDate(dateString) {\n    if (dateString) {\n\n      console.log(dateString)\n      const d = new Date(dateString)\n      console.log(d)\n      const ye = new Intl.DateTimeFormat('es-ES', { year: 'numeric' }).format(d)\n      const mo = new Intl.DateTimeFormat('es-ES', { month: 'long' }).format(d)\n      const da = new Intl.DateTimeFormat('es-ES', { day: '2-digit' }).format(d)\n      const hr = new Intl.DateTimeFormat('es-ES', { hour: 'numeric' }).format(d)\n      const mn = new Intl.DateTimeFormat('es-ES', { minute: 'numeric' }).format(d)\n      const sc = new Intl.DateTimeFormat('es-ES', { second: 'numeric' }).format(d)\n      return `${da}-${mo}-${ye} a las ${hr}:${mn}:${sc}`\n    } else {\n      return 'no info'\n    }\n  }\n\n  function handleSelectCountry(countrySelected) {\n    setSelectedCountry(countrySelected)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Seguimiento sobre el COVID-19 (Nuevo CORONAVIRUS)</h1>\n      <Countries \n        selectedCountry={selectedCountry}\n        handleSelectCountry={handleSelectCountry} \n      />\n      <h3>A continuación mostramos las estadísticas sobre los casos...</h3>\n      {loading === false && \n        <label>Última actualización: {formatDate(lastUpdate)}</label>\n      }\n      { loading === true && \n        <p>Cargando ...</p>\n      }\n      { loading ===false && \n        <div className=\"paper stats\">\n          <Stat \n            title=\"Confirmados\"\n            value={confirmed.value}\n          />\n          <Stat \n            title=\"Recuperados\"\n            value={recovered.value}\n          />\n          <Stat \n            title=\"Fallecidos\"\n            value={deaths.value}\n          />\n        </div>\n      }\n      <div className=\"error\">\n        <h4>{error}</h4>\n      </div>\n      <div className=\"footer\">\n        <h4>Este código está disponible en <a href=\"https://github.com/vicmonmena/follow-covid19\">GitHub</a>.</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}